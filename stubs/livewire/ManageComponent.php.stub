<?php

declare(strict_types=1);

namespace App\Livewire\App#classNamespace##ucfirstCamelModelNamePlural#;

use App\Actions\App#classNamespace##ucfirstCamelModelNamePlural#\Delete#className#Action;
use App\Models#classNamespace##className#;
use App\Tables\App#classNamespace##className#TableSettings;
use Illuminate\Contracts\View\View;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Livewire\Component;
use Livewire\Features\SupportRedirects\Redirector;
use Livewire\WithPagination;
use PavelZanek\LaravelGenerator\Enums\TableFilters\FilterTypeEnum;

class Manage#className#Component extends Component
{
    use WithPagination;

    /**
     * @var string
     */
    public string $sortColumn = 'created_at';

    /**
     * @var string
     */
    public string $sortDirection = 'desc';

    /**
     * @var array<array-key, mixed>
     */
    public array $filters = [];

    /**
     * @var array<string, array<string, mixed>>
     */
    protected $queryString = [
        'sortColumn' => ['except' => 'created_at'],
        'sortDirection' => ['except' => 'desc'],
        'filters' => ['except' => []]
    ];

    /**
     * @param \Illuminate\Http\Request $request
     * @return void
     */
    public function mount(Request $request): void
    {
        $this->sortColumn = $request->get('sort', 'created_at');
        $this->sortDirection = $request->get('direction', 'desc');
        $this->filters = $request->get('filters', []);
    }

    /**
     * @return \Illuminate\Contracts\View\View
     */
    public function render(): View
    {
        $tableColumns = #className#TableSettings::getTableColumns();

        $#camelModelNamePlural# = #className#::query()
            ->when($this->filters, function ($query, $filters) use ($tableColumns) {
                foreach ($filters as $column => $value) {
                    if ($value !== null && $value !== '') {
                        $tableColumn = $tableColumns[$column];
                        $operator = $tableColumn->getFilterOperator()?->value === 'equal' ? '=' : 'like';

                        if (
                            $tableColumn->getFilterType()?->value === FilterTypeEnum::SELECT->value
                            && $tableColumn->getFilterSelectValues()
                        ) {
                            $value = $value === 'not_set' ? null : $value;
                        }

                        if ($value !== null) {
                            $query->where($column, $operator, $operator === 'like' ? "%{$value}%" : $value);
                        }
                    }
                }
            })
            ->orderBy($this->sortColumn, $this->sortDirection)
            ->paginate(20);

        return view('livewire.app#dottedClassNamespace##sluggedModelNamePlural#.manage-#sluggedModelNameSingular#-component', [
            '#camelModelNamePlural#' => $#camelModelNamePlural#,
            'sortColumn' => $this->sortColumn,
            'sortDirection' => $this->sortDirection,
            'filters' => $this->filters,
            'tableColumns' => $tableColumns,
        ]);
    }

    /**
     * @return void
     */
    public function updatingFilters(): void
    {
        $this->resetPage();
    }

    /**
     * @param string $column
     * @return void
     */
    public function sortBy(string $column): void
    {
        if ($this->sortColumn === $column) {
            $this->sortDirection = $this->sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            $this->sortColumn = $column;
            $this->sortDirection = 'asc';
        }
        $this->resetPage();
    }

    /**
     * @return void
     */
    public function resetFilters(): void
    {
        $this->filters = [];
    }

    /**
     * @param \App\Models#classNamespace##className# $#camelModelNameSingular#
     * @return \Illuminate\Http\RedirectResponse|\Livewire\Features\SupportRedirects\Redirector
     */
    public function deleteItem(#className# $#camelModelNameSingular#): Redirector|RedirectResponse
    {
        (new Delete#className#Action())->execute($#camelModelNameSingular#);

        return redirect()->route('#sluggedModelNamePlural#.index')->with([
            'flashType' => 'success',
            'flashMessage' => __('#translationPath#.flash.deleted'),
        ]);
    }
}
