<?php

declare(strict_types=1);

namespace Tests\Feature\Livewire\App#classNamespace##ucfirstCamelModelNamePlural#;

use App\Enums\ExampleEnum;
use App\Livewire\App#classNamespace##ucfirstCamelModelNamePlural#\Create#className#Component;
use App\Models#classNamespace##className#;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Livewire;
use Tests\TestCase;

class Create#className#ComponentTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp();

        // $this->actingAs(User::factory()->withPersonalTeam()->create());
    }

    /**
     * @return void
     */
    public function testComponentCanRender(): void
    {
        Livewire::test(Create#className#Component::class)
            ->assertStatus(200)
            ->assertViewIs('livewire.app#dottedClassNamespace##sluggedModelNamePlural#.create-#sluggedModelNameSingular#-component');
    }

    /**
     * @return void
     */
    public function testComponentLoadsEnumValues(): void
    {
        Livewire::test(Create#className#Component::class)
            ->assertViewHas('exampleEnums', ExampleEnum::all());
    }

    /**
     * @return void
     */
    public function testComponentCanCreateItem(): void
    {
        $data = [
            'formData' => [
                #className#::ATTR_STRING => 'Example String',
                #className#::ATTR_TEXT => 'Example Text',
                #className#::ATTR_INTEGER => 42,
                #className#::ATTR_BOOLEAN => true,
                #className#::ATTR_ENUM => ExampleEnum::ENUM1->value,
            ],
        ];

        Livewire::test(Create#className#Component::class)
            ->set('form.formData', $data['formData'])
            ->call('save')
            ->assertRedirect(route('#sluggedModelNamePlural#.index'));

        $this->assertDatabaseHas('#dbTableName#', [
            #className#::ATTR_STRING => 'Example String',
            #className#::ATTR_TEXT => 'Example Text',
            #className#::ATTR_INTEGER => 42,
            #className#::ATTR_BOOLEAN => true,
            #className#::ATTR_ENUM => ExampleEnum::ENUM1,
        ]);
    }

    /**
     * @return void
     */
    public function testValidationErrors(): void
    {
        Livewire::test(Create#className#Component::class)
            ->set('form.formData.' . #className#::ATTR_STRING, '')
            ->call('save')
            ->assertHasErrors(['form.formData.' . #className#::ATTR_STRING => 'required']);

        Livewire::test(Create#className#Component::class)
            ->set('form.formData.' . #className#::ATTR_INTEGER, 'not-a-number')
            ->call('save')
            ->assertHasErrors(['form.formData.' . #className#::ATTR_INTEGER => 'integer']);
    }
}
