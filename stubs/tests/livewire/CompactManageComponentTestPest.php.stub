<?php

declare(strict_types=1);

use App\Enums\ExampleEnum;
use App\Livewire\App#classNamespace##ucfirstCamelModelNamePlural#\Manage#className#Component;
use App\Models#classNamespace##className#;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Livewire;

uses(RefreshDatabase::class);

beforeEach(function () {
    // actingAs(User::factory()->withPersonalTeam()->create());
});

it('can render the component', function () {
    #className#::factory(10)->create();

    Livewire::test(Manage#className#Component::class)
        ->assertStatus(200)
        ->assertViewIs('livewire.app#dottedClassNamespace##sluggedModelNamePlural#.manage-#sluggedModelNameSingular#-component');
});

it('can sort items', function () {
    $item1 = #className#::factory()->create([#className#::ATTR_CREATED_AT => now()->subDay()]);
    $item2 = #className#::factory()->create([#className#::ATTR_CREATED_AT => now()]);

    Livewire::test(Manage#className#Component::class)
        ->call('sortBy', #className#::ATTR_CREATED_AT)
        ->assertSeeInOrder([$item2->name, $item1->name]);
});

it('can filter items', function () {
    $item1 = #className#::factory()->create([#className#::ATTR_STRING => 'Foo']);
    $item2 = #className#::factory()->create([#className#::ATTR_STRING => 'Bar']);

    Livewire::test(Manage#className#Component::class)
        ->set('filters.'.#className#::ATTR_STRING, 'Foo')
        ->assertSee($item1->string)
        ->assertDontSee($item2->string);
});

it('can create an item', function () {
    $data = [
        'formData' => [
            #className#::ATTR_STRING => 'Example String',
            #className#::ATTR_TEXT => 'Example Text',
            #className#::ATTR_INTEGER => 42,
            #className#::ATTR_BOOLEAN => true,
            #className#::ATTR_ENUM => ExampleEnum::ENUM1->value,
        ],
    ];

    Livewire::test(Manage#className#Component::class)
        ->set('form.formData', $data['formData'])
        ->call('saveItem')
        ->assertRedirect(route('#sluggedModelNamePlural#.index'));

    $this->assertDatabaseHas('#dbTableName#', [
        #className#::ATTR_STRING => 'Example String',
        #className#::ATTR_TEXT => 'Example Text',
        #className#::ATTR_INTEGER => 42,
        #className#::ATTR_BOOLEAN => true,
        #className#::ATTR_ENUM => ExampleEnum::ENUM1,
    ]);
});

it('can update an item', function () {
    $item = #className#::factory()->create();

    $data = [
        'formData' => [
            #className#::ATTR_STRING => 'Example String',
            #className#::ATTR_TEXT => 'Example Text',
            #className#::ATTR_INTEGER => 42,
            #className#::ATTR_BOOLEAN => true,
            #className#::ATTR_ENUM => ExampleEnum::ENUM1->value,
        ],
    ];

    Livewire::test(Manage#className#Component::class, ['#camelModelNameSingular#' => $item])
        ->set('confirmingItemManage', $item->id)
        ->set('form.formData', $data['formData'])
        ->call('saveItem')
        ->assertRedirect(route('#sluggedModelNamePlural#.index'));

    $this->assertDatabaseHas('#dbTableName#', [
        #className#::ATTR_ID => $item->id,
        #className#::ATTR_STRING => 'Example String',
        #className#::ATTR_TEXT => 'Example Text',
        #className#::ATTR_INTEGER => 42,
        #className#::ATTR_BOOLEAN => true,
        #className#::ATTR_ENUM => ExampleEnum::ENUM1,
    ]);
});

it('validates form inputs', function () {
    Livewire::test(Manage#className#Component::class)
        ->set('form.formData.' . #className#::ATTR_STRING, '')
        ->call('saveItem')
        ->assertHasErrors(['form.formData.' . #className#::ATTR_STRING => 'required']);

    Livewire::test(Manage#className#Component::class)
        ->set('form.formData.' . #className#::ATTR_INTEGER, 'not-a-number')
        ->call('saveItem')
        ->assertHasErrors(['form.formData.' . #className#::ATTR_INTEGER => 'integer']);
});

it('can delete an item', function () {
    $item = #className#::factory()->create();

    Livewire::test(Manage#className#Component::class)
        ->call('deleteItem', $item->id)
        ->assertRedirect(route('#sluggedModelNamePlural#.index'));

    $this->assertSoftDeleted('#dbTableName#', [#className#::ATTR_ID => $item->id]);
});
